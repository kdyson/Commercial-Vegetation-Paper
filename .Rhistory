matrify.tree.sp.only <- ez.matrify(filename = count.tree.sp.only,
species.name = "tree.species",
site.name = 'site',
abundance = "tree.count")
if (remove.raw == TRUE) {
remove(tree.data, count.tree.sp.only, count.tree.sp.size)
}
## Native classifications for trees:
tree.native <- tree.native[!tree.native$tree.species == "purple.beech", ]
tree.native$total.abundance <- colSums(matrify.tree.sp.only)
## -- SHRUB DATA -----------------------------------------------------------------
## Load raw data sources
shrub.data <- read.csv("shrubdata.csv",
stringsAsFactors = F)[-1]
shrub.native <- read.csv("shrub_native.csv",
stringsAsFactors = FALSE)
## Update naming etc.
shrub.data[shrub.data$Species.Common == "spiraea", 5] <-
"spiraea.japonica.gp"
shrub.data[shrub.data$Species.Taxonomic == "spiraea.sp", 6] <-
"spiraea.japonica.gp"
shrub.data[shrub.data$Species.Common %in% c("dogwood", "tatarian.dogwood"), 5] <-
"tatarian.dogwood.gp"
shrub.data[shrub.data$Species.Taxonomic %in% c("cornus.sp", "cornus.alba"), 6] <-
"cornus.alba.gp"
shrub.native$shrub.scientific.update <- ifelse(
test = shrub.native$shrub.scientific.update == "",
yes =  shrub.native$shrub.scientific,
no = shrub.native$shrub.scientific.update
)
shrub.native$shrub.origin.update <-
ifelse(
test = shrub.native$shrub.origin.update == "",
yes =  shrub.native$shrub.origin,
no = shrub.native$shrub.origin.update
)
shrub.data <- merge(shrub.data, shrub.native,
by.x = "Species.Taxonomic", by.y = "shrub.species",
all.x = TRUE, sort = FALSE)
# don't need to do group_by for the shrubs since I summarized by site/zone
# already--though do need to for sites only.
count.shrub.site <- group_by(shrub.data, Site,
Species.Taxonomic) %>%
summarise(
shrub.count = sum(Count),
shrub.common = max(Species.Common),
shrub.common.pretty = max(shrub.common.pretty),
shrub.scientific = max(shrub.scientific.update),
shrub.genus = max(Genus)
)
## need to get rid of ferns (and DNE/NOSHRUBS for site, since there aren't zones)
count.shrub.site <- count.shrub.site[count.shrub.site$shrub.count < 999, ]
count.shrub.zone <- shrub.data[!(shrub.data$Species.Common %in% c("ferns")), ]
## remove species with count = 0
count.shrub.site <- count.shrub.site[count.shrub.site$shrub.count > 0, ]
count.shrub.zone <- count.shrub.zone[count.shrub.zone$Count > 0, ]
## Create species/site matrices:
matrify.shrub.zones <- ez.matrify(count.shrub.zone,
species.name = "shrub.scientific",
site.name = "Site.Standard.Group",
abundance = "Count")
## Note: I considered combining prunus laurocerasus (cherry laurel) and
## var. zabeliana (Zabel laurel) because they're technically varieties
## of the same species. However, one is a large shrub (frequently used
## as 8'+ hedging) and the other is <2' tall. The habitat provided by
## the two is thus very different (birds regularly perch and nest in
## cherry laurel, where not so much in zabel...). Since the dogwoods are
## also split into tree and shrubs, I left it as is.
matrify.shrub.zones$`Prunus laurocerasus` <-
matrify.shrub.zones$`Prunus laurocerasus` +
matrify.shrub.zones$`Prunus laurocerasus var. zabeliana`
matrify.shrub.zones$`Prunus laurocerasus var. zabeliana` <- NULL
matrify.shrub.site <- ez.matrify(count.shrub.site,
species.name = "shrub.scientific",
site.name = "Site",
abundance = "shrub.count")
matrify.shrub.site$`Prunus laurocerasus` <-
matrify.shrub.site$`Prunus laurocerasus` +
matrify.shrub.site$`Prunus laurocerasus var. zabeliana`
matrify.shrub.site$`Prunus laurocerasus var. zabeliana` <- NULL
if (remove.raw == TRUE) {
remove(shrub.data, count.shrub.site, count.shrub.zone)
}
## Native classifications for shrubs:
# shrub.native <- shrub.native[shrub.native$shrub.scientific.update %in%
#                                  colnames(matrify.shrub.site) , ]
## Need to make sure shrub.native is in the same order.
shrub.native <- distinct(shrub.native, shrub.scientific.update, .keep_all = TRUE)
shrub.native <- shrub.native[-which(shrub.native$shrub.scientific.update ==
"Prunus laurocerasus var. zabeliana"), ]
shrub.native <- shrub.native[ order(shrub.native$shrub.scientific.update), ]
matrify.shrub.site <- matrify.shrub.site[ , order(names(matrify.shrub.site))]
shrub.native$shrub.scientific.update == colnames(matrify.shrub.site)
shrub.native$total.abundance <- colSums(matrify.shrub.site)
## -- GROUND COVER DATA ----------------------------------------------------------
## I cannot find the original code that turned the area based gc data
## exported from GIS into the matrified form. NOTE that there was an error
## in the previous saved CSV, now called matrifygcdataBAD.csv. The following
## gives correct figures (checked against GIS).
ground.cover <- read.csv("groundcover_area2.csv")
count.gc <- group_by(ground.cover, Site, CovTyp) %>%
summarise(
Area.sqft = sum(area.sqft)
)
matrify.gc <- ez.matrify(filename = count.gc, species.name = "CovTyp",
site.name = "Site", abundance = "Area.sqft")
matrify.gc <- matrify.gc[ , -which(colnames(matrify.gc) == "forest")]
matrify.gc <- merge(matrify.gc,
sample.covariates[ , colnames(sample.covariates) %in%
c("SiteName", "DissolvedArea")],
by.x = 0, by.y = "SiteName",
sort = FALSE,
all.x = TRUE)
rownames(matrify.gc) <- matrify.gc$Row.names
matrify.gc$Row.names <- NULL
matrify.gc$impervious.sqft <-
matrify.gc$DissolvedArea - rowSums(matrify.gc[ , 1:7])
matrify.gc$pervious.sqft <-
rowSums(matrify.gc[ , 1:7])
colnames(matrify.gc) <- c("dense.veg",
"dirt.litter",
"grass",
"gravel",
"ivy",
"mulch",
"water",
"total.area",
"impervious.sqft",
"pervious.sqft")
matrify.gc <- matrify.gc[ , c(1:7, 9:10, 8)]
if (remove.raw == TRUE) {
remove(ground.cover, count.gc)
}
## -- DATA STANDARDIZTION -------------------------------------------------------
## Wisconsin standardization doesn't make sense for my data: the between
## site effort is already standardized. However, looking at both relative (%
## of total trees/shrubs per site) and absolute (# per site) provides useful
## insight.
# relativize by TOTAL area--it is the developer's decision on how much
# imperviuos vs. pervious surface to create and a combination of the
# developer and property owner on how to plant.
# Note that these are number of shrubs or trees/acre
if (length(setdiff(rownames(matrify.shrub.site),
sample.covariates$SiteName)) == 0 &
rownames(matrify.shrub.site)[19] == sample.covariates$SiteName[19]) {
dens.matrify.shrub.site <-
matrify.shrub.site / sample.covariates$acres
} else {
dens.matrify.shrub.site <-
merge(
matrify.shrub.site,
sample.covariates[, which(colnames(sample.covariates) %in%
c("SiteName", "acres"))],
by.x = 0,
by.y = "SiteName",
sort = FALSE,
all.x = TRUE
)
row.names(dens.matrify.shrub.site) <-
dens.matrify.shrub.site$Row.names
dens.matrify.shrub.site$Row.names <- NULL
dens.matrify.shrub.site <-
dens.matrify.shrub.site / dens.matrify.shrub.site$acres
dens.matrify.shrub.site$acres <- NULL
}
if (length(setdiff(rownames(matrify.tree.sp.only),
sample.covariates$SiteName)) == 0 &
rownames(matrify.tree.sp.only)[19] == sample.covariates$SiteName[19]) {
dens.matrify.tree.sp.only <-
matrify.tree.sp.only / sample.covariates$acres
} else {
dens.matrify.tree.sp.only <-
merge(
matrify.tree.sp.only,
sample.covariates[, which(colnames(sample.covariates) %in%
c("SiteName", "acres"))],
by.x = 0,
by.y = "SiteName",
sort = FALSE,
all.x = TRUE
)
row.names(dens.matrify.tree.sp.only) <-
dens.matrify.tree.sp.only$Row.names
dens.matrify.tree.sp.only$Row.names <- NULL
dens.matrify.tree.sp.only <-
dens.matrify.tree.sp.only / dens.matrify.tree.sp.only$acres
dens.matrify.tree.sp.only$acres <- NULL
}
dens.matrify.tree.sp.size <-
matrify.tree.sp.size / sample.covariates$acres
dens.matrify.gc <- matrify.gc / matrify.gc$total.area
## Transformations necessary for normality...
## Tree density:
## Quick test for multivariate normality
# uniPlot((matrify.tree.sp.only[ ,25:35 ]^.5), type = "histogram")
## Third root seems to give more normal results... but ONLY for
## non-zeros. So many species get messed up, don't transform.
## Large trees only:
matrify.large.trees <-
matrify.tree.sp.size[, grepl(colnames(matrify.tree.sp.size), pattern = ".L")]
## Shrub density:
##
## Quick test for multivariate normality
# uniPlot((dens.matrify.shrub.site[ ,25:35 ]^.5), type = "histogram")
## Third root seems to give more normal results... but  again, ONLY
## for non-zeros. So many species get messed up, don't transform.
## -- WRITE ---------------------------------------------------------------------
View(count.tree.type)
View(dens.matrify.gc)
View(shrub.native)
str(sample.covariates)
write.csv(matrify.tree.sp.only, file = "matrify_tree_species.csv")
write.csv(matrify.tree.sp.size, file = "matrify_tree_species_size.csv")
write.csv(dens.matrify.tree.sp.only, file = "dens_matrify_tree_species.csv")
write.csv(matrify.shrub.site, file = "matrify_shrub_bysite_comb.csv")
write.csv(matrify.shrub.zones, file = "matrify_shrub_byzone_comb.csv")
write.csv(dens.matrify.shrub.site, file = "dens_matrify_shrub_bysite_comb.csv")
write.csv(matrify.gc, file = "matrify_gc.csv")
write.csv(dens.matrify.gc, file = "dens_matrify_gc.csv")
write.csv(DF.site.measures, file = "DF_site_measures.csv")
write.csv(management.landscaping, file = "management_landscaping.csv")
write.csv(sample.covariates, "sample_covariates.csv")
write.csv(shrub.native, "shrub_native_updated.csv")
write.csv(tree.native, "tree_native_updated.csv")
sample.covariates <- sample.covariates[ order(sample.covariates$SiteName), ]
matrify.tree.sp.only <- matrify.tree.sp.only[ order(rownames(matrify.tree.sp.only)), ]
matrify.tree.sp.size <- matrify.tree.sp.size[ order(rownames(matrify.tree.sp.size)), ]
dens.matrify.tree.sp.only <- dens.matrify.tree.sp.only[ order(rownames(dens.matrify.tree.sp.only)), ]
matrify.gc <- matrify.gc[ order(rownames(matrify.gc)), ]
dens.matrify.gc <- dens.matrify.gc[ order(rownames(dens.matrify.gc)), ]
matrify.shrub.site <- matrify.shrub.site[ order(rownames(matrify.shrub.site)), ]
dens.matrify.shrub.site <- dens.matrify.shrub.site[ order(rownames(dens.matrify.shrub.site)), ]
write.csv(matrify.tree.sp.only, file = "matrify_tree_species.csv")
write.csv(matrify.tree.sp.size, file = "matrify_tree_species_size.csv")
write.csv(dens.matrify.tree.sp.only, file = "dens_matrify_tree_species.csv")
write.csv(matrify.shrub.site, file = "matrify_shrub_bysite_comb.csv")
write.csv(matrify.shrub.zones, file = "matrify_shrub_byzone_comb.csv")
write.csv(dens.matrify.shrub.site, file = "dens_matrify_shrub_bysite_comb.csv")
write.csv(matrify.gc, file = "matrify_gc.csv")
write.csv(dens.matrify.gc, file = "dens_matrify_gc.csv")
write.csv(DF.site.measures, file = "DF_site_measures.csv")
write.csv(management.landscaping, file = "management_landscaping.csv")
write.csv(sample.covariates, "sample_covariates.csv")
write.csv(shrub.native, "shrub_native_updated.csv")
write.csv(tree.native, "tree_native_updated.csv")
library(dplyr)
library(ggplot2)
vc.mean <- mutate(sample.covariates,
tot.abund = rowSums(matrify.tree.sp.only),
tot.density = rowSums(dens.matrify.tree.sp.only)) %>%
group_by(vegetation_class) %>%
summarise_at(.vars = c("tot.abund"),
.funs = list(treeab.mean = mean,
treeab.sd = sd))
pop.tree.extrap <- merge(population.covariates, vc.mean,
by = "vegetation_class", sort = F)
# need to set the order of factors
pop.tree.extrap$vegetation_class <- factor(pop.tree.extrap$vegetation_class,
levels = c("HH", "MC", "MD", "MM", "LL"))
library(ggplot2)
pop.tree.extrap$jittered <- jitter(pop.tree.extrap$treeab.mean,
pop.tree.extrap$treeab.sd)
pop.tree.extrap$jittered[pop.tree.extrap$jittered < 1] <- 1
ggplot(pop.tree.extrap, aes(jittered)) +
geom_histogram(aes(fill = vegetation_class), binwidth = 10) +
scale_fill_manual(values = c("#008837", "#a6dba0", "#ffffbf", "#c2a5cf", "#7b3294")) +
labs(x = "Tree Abundance per Site",
y = "Number of Sites",
title = "Tree Abundance on Office Developments") + scale_x_continuous(limits = c(0, max(jittered) + 5))
ggplot(pop.tree.extrap, aes(jittered)) +
geom_dotplot(aes(fill = vegetation_class), binwidth = 10) +
scale_fill_manual(values = c("#008837", "#a6dba0", "#ffffbf", "#c2a5cf", "#7b3294")) +
labs(x = "Tree Abundance per Site",
y = "Number of Sites",
title = "Tree Abundance on Office Developments") + scale_x_continuous(limits = c(0, max(jittered) + 5))
View(pop.tree.extrap)
ggplot(pop.tree.extrap, aes(jittered)) +
geom_histogram(aes(fill = vegetation_class), binwidth = 10) +
scale_fill_manual(values = c("#008837", "#a6dba0", "#ffffbf", "#c2a5cf", "#7b3294")) +
labs(x = "Tree Abundance per Site",
y = "Number of Sites",
title = "Tree Abundance on Office Developments") + scale_x_continuous(limits = c(0, max(jittered) + 5))
library(ggplot2)
pop.tree.extrap$jittered <- jitter(pop.tree.extrap$treeab.mean,
pop.tree.extrap$treeab.sd)
pop.tree.extrap$jittered[pop.tree.extrap$jittered < 1] <- 0
ggplot(pop.tree.extrap, aes(jittered)) +
geom_histogram(aes(fill = vegetation_class), binwidth = 10) +
scale_fill_manual(values = c("#008837", "#a6dba0", "#ffffbf", "#c2a5cf", "#7b3294")) +
labs(x = "Tree Abundance per Site",
y = "Number of Sites",
title = "Tree Abundance on Office Developments") + scale_x_continuous(limits = c(0, max(jittered) + 5))
pop.tree.extrap$vegetation_class
str(pop.tree.extrap$vegetation_class)
str(pop.tree.extrap$jittered)
summary(pop.tree.extrap$jittered)
hist(pop.tree.extrap$jittered)
ggplot(pop.tree.extrap, aes(jittered)) +
geom_histogram(aes(fill = vegetation_class), binwidth = 10) +
scale_fill_manual(values = c("#008837", "#a6dba0", "#ffffbf", "#c2a5cf", "#7b3294")) +
labs(x = "Tree Abundance per Site",
y = "Number of Sites",
title = "Tree Abundance on Office Developments") + scale_x_continuous(limits = c(-1, max(jittered) + 5))
ggplot(pop.tree.extrap, aes(jittered)) +
geom_histogram(aes(fill = vegetation_class), binwidth = 10) +
scale_fill_manual(values = c("#008837", "#a6dba0", "#ffffbf", "#c2a5cf", "#7b3294"), name = "") +
labs(x = "Tree Abundance per Site",
y = "Number of Sites",
title = "Tree Abundance on Office Developments") + scale_x_continuous(limits = c(-1, max(jittered) + 5))
source("vegetation_data_analysis_Combine.R")
install.packages("MVN")
source("vegetation_data_analysis_Combine.R")
install.packages("lmerTest")
source("vegetation_data_analysis_Combine.R")
source("vegetation_data_analysis_Combine.R")
warnings()
vegclass.site.stats <-
group_by(extrapolate.site.stats[, c(2, 4:5, 13, 21)], vegetation_class) %>%
summarise_all(list(~min, ~max, ~mean, ~sd, ~median))
vegclass.site.stats <-
group_by(extrapolate.site.stats[, c(2, 4:5, 13, 21)], vegetation_class) %>%
summarise_all(list(min, max, mean, sd, median))
pretty.vegclass.site.stats <- tibble(
vegetation_class = vegclass.site.stats$vegetation_class,
site.area.range = paste(
vegclass.site.stats$site.area_min,
"-",
vegclass.site.stats$site.area_max
),
site.area.mean = paste(
vegclass.site.stats$site.area_mean,
"(+/-",
vegclass.site.stats$site.area_sd,
")"
),
tree.site.density.range = paste(
vegclass.site.stats$tree.site.density_min,
"-",
vegclass.site.stats$tree.site.density_max
),
tree.site.density.mean = paste(
vegclass.site.stats$tree.site.density_mean,
"(+/-",
vegclass.site.stats$tree.site.density_sd,
")"
),
tree.con.nat.dens.range = paste(
vegclass.site.stats$tree.conifer.nat.dens_min,
"-",
vegclass.site.stats$tree.conifer.nat.dens_max
),
tree.con.nat.dens.mean = paste(
vegclass.site.stats$tree.conifer.nat.dens_mean,
"(+/-",
vegclass.site.stats$tree.conifer.nat.dens_sd,
")"
)
)
vegclass.site.stats
vegclass.site.stats <-
group_by(extrapolate.site.stats[, c(2, 4:5, 13, 21)], vegetation_class) %>%
summarise_all(list(min = min, max = max, mean = mean, sd = sd, median = median))
pretty.vegclass.site.stats <- tibble(
vegetation_class = vegclass.site.stats$vegetation_class,
site.area.range = paste(
vegclass.site.stats$site.area_min,
"-",
vegclass.site.stats$site.area_max
),
site.area.mean = paste(
vegclass.site.stats$site.area_mean,
"(+/-",
vegclass.site.stats$site.area_sd,
")"
),
tree.site.density.range = paste(
vegclass.site.stats$tree.site.density_min,
"-",
vegclass.site.stats$tree.site.density_max
),
tree.site.density.mean = paste(
vegclass.site.stats$tree.site.density_mean,
"(+/-",
vegclass.site.stats$tree.site.density_sd,
")"
),
tree.con.nat.dens.range = paste(
vegclass.site.stats$tree.conifer.nat.dens_min,
"-",
vegclass.site.stats$tree.conifer.nat.dens_max
),
tree.con.nat.dens.mean = paste(
vegclass.site.stats$tree.conifer.nat.dens_mean,
"(+/-",
vegclass.site.stats$tree.conifer.nat.dens_sd,
")"
)
)
vegclass.site.stats <- merge(vegclass.site.stats, VegClass[1:5 , c(1,2,4)],
by.x = "vegetation_class", by.y = "VegClass")
cluster.site.stats
cluster.site.stats <- group_by(extrapolate.site.stats[ , 2:19],
tree.cluster.name) %>%
summarise_all(list(min = min, max = max,
mean = mean, sd = sd,
median = median))
cluster.site.stats[2:86] <- round(cluster.site.stats[2:86] , 2)
cluster.site.stats <- group_by(extrapolate.site.stats[ , 2:19],
tree.cluster.name) %>%
summarise_all(list(min = min, max = max,
mean = mean, sd = sd,
median = median)) %>% round(2)
extrapolate.site.stats
extrapolate.site.stats <- merge(descriptive.stats.site[ , 1:18],
vegetation.clusters[ , c(1,4:6)],
by.x = "site", by.y = "SiteName", sort = F)
extrapolate.site.stats$tree.cluster.name <-
as.character(extrapolate.site.stats$tree.cluster.name)
cluster.site.stats <- group_by(extrapolate.site.stats[ , 2:19],
tree.cluster.name) %>%
summarise_all(list(min = min, max = max,
mean = mean, sd = sd,
median = median)) %>% round(2)
extrapolate.site.stats <- merge(descriptive.stats.site[ , 1:18],
vegetation.clusters[ , c(1,4:6)],
by.x = "site", by.y = "SiteName", sort = F)
extrapolate.site.stats$tree.cluster.name <-
as.factor(extrapolate.site.stats$tree.cluster.name)
cluster.site.stats <- group_by(extrapolate.site.stats[ , 2:19],
tree.cluster.name) %>%
summarise_all(list(min = min, max = max,
mean = mean, sd = sd,
median = median)) %>% round(2)
extrapolate.site.stats$tree.cluster.name
extrapolate.site.stats <- merge(descriptive.stats.site[ , 1:18],
vegetation.clusters[ , c(1,4:6)],
by.x = "site", by.y = "SiteName", sort = F)
extrapolate.site.stats$tree.cluster.name <-
as.character(extrapolate.site.stats$tree.cluster.name)
extrapolate.site.stats$tree.cluster.name
extrapolate.site.stats[ , 2:19]
colnames(extrapolate.site.stats)
cluster.site.stats$site.area_min
cluster.site.stats <- group_by(extrapolate.site.stats[ , 2:19],
tree.cluster.name) %>%
summarise_all(list(min = min, max = max,
mean = mean, sd = sd,
median = median)) %>% round(2)
cluster.site.stats <- group_by(extrapolate.site.stats[ , 2:19],
tree.cluster.name) %>%
summarise_all(list(min = min, max = max,
mean = mean, sd = sd,
median = median))
cluster.site.stats[2:86] <- round(cluster.site.stats[2:86] , 2)
cluster.site.stats[2:86]
pretty.cluster.site.stats <- tibble(
tree.cluster.name = cluster.site.stats$tree.cluster.name,
site.area.range = paste(
cluster.site.stats$site.area_min,
"-",
cluster.site.stats$site.area_max
),
site.area.mean = paste(
cluster.site.stats$site.area_mean,
"(+/-",
cluster.site.stats$site.area_sd,
")"
),
tree.site.density.range = paste(
cluster.site.stats$tree.site.density_min,
"-",
cluster.site.stats$tree.site.density_max
),
tree.site.density.mean = paste(
cluster.site.stats$tree.site.density_mean,
"(+/-",
cluster.site.stats$tree.site.density_sd,
")"
),
tree.con.nat.dens.range = paste(
cluster.site.stats$tree.conifer.nat.dens_min,
"-",
cluster.site.stats$tree.conifer.nat.dens_max
),
tree.con.nat.dens.mean = paste(
cluster.site.stats$tree.conifer.nat.dens_mean,
"(+/-",
cluster.site.stats$tree.conifer.nat.dens_sd,
")"
)
)
vc.mean <- mutate(sample.covariates,
tot.abund = rowSums(matrify.tree.sp.only),
tot.density = rowSums(dens.matrify.tree.sp.only)) %>%
group_by(vegetation_class) %>%
summarise_at(.vars = c("tot.abund"),
.funs = list(treeab.mean = mean,
treeab.sd = sd))
pop.tree.extrap <- merge(population.covariates, vc.mean,
by = "vegetation_class", sort = F)
pop.tree.extrap$vegetation_class <- factor(pop.tree.extrap$vegetation_class,
levels = c("HH", "MC", "MD", "MM", "LL"))
library(ggplot2)
pop.tree.extrap$jittered <- jitter(pop.tree.extrap$treeab.mean,
pop.tree.extrap$treeab.sd)
pop.tree.extrap$jittered[pop.tree.extrap$jittered < 1] <- 0
ggplot(pop.tree.extrap, aes(jittered)) +
geom_histogram(aes(fill = vegetation_class), binwidth = 10) +
scale_fill_manual(values = c("#008837", "#a6dba0", "#ffffbf", "#c2a5cf", "#7b3294"), name = "") +
labs(x = "Tree Abundance per Site",
y = "Number of Sites",
title = "Tree Abundance on Office Developments") + scale_x_continuous(limits = c(-1, max(jittered) + 5))
